
// for struct

#define FLASH_SECTOR_7  7                 // Sector 7 of STM32F401
#define EEPROM_START_ADDRESS  0x08050000  // Start address 

typedef struct {
    uint32_t id;
    float value;
    char name[20];
} MyData;

void serializeStruct(const MyData *data, uint8_t *buffer) {
    memcpy(buffer, data, sizeof(MyData));
}

void deserializeStruct(const uint8_t *buffer, MyData *data) {
    memcpy(data, buffer, sizeof(MyData));
}
void Flash_EraseSector(void) {
    HAL_FLASH_Unlock();

    FLASH_Erase_Sector(FLASH_SECTOR_7, VOLTAGE_RANGE_3);

    HAL_FLASH_Lock();
}

void Flash_WriteData(uint32_t address, uint32_t data) {
    HAL_FLASH_Unlock();

    HAL_FLASH_Program(TYPEPROGRAM_WORD, address, data);

    HAL_FLASH_Lock();
}

uint32_t Flash_ReadData(uint32_t address) {
    return *(__IO uint32_t *)address;
}


void EEPROM_Write(uint32_t address, const uint8_t *data, size_t length) {
    Flash_EraseSector();  // Erase the sector before writing
    for (size_t i = 0; i < length; i += 4) {
        uint32_t word;
        memcpy(&word, data + i, 4);  // Copy 4 bytes into a 32-bit word
        Flash_WriteData(address + i, word);
    }
}

void EEPROM_Read(uint32_t address, uint8_t *data, size_t length) {
    for (size_t i = 0; i < length; i += 4) {
        uint32_t word = Flash_ReadData(address + i);
        memcpy(data + i, &word, 4);  // Copy 32-bit word into 4 bytes
    }
}

int main(void) {
    HAL_Init();
    SystemClock_Config();

    MyData dataToWrite = { 1, 3.14f, "STM32F401" };
    MyData dataRead;
    uint8_t buffer[sizeof(MyData)];

    // Serialize and write to EEPROM
    serializeStruct(&dataToWrite, buffer);
    EEPROM_Write(EEPROM_START_ADDRESS, buffer, sizeof(MyData));

    // Read from EEPROM and deserialize
    EEPROM_Read(EEPROM_START_ADDRESS, buffer, sizeof(MyData));
    deserializeStruct(buffer, &dataRead);

    // Check if the data was written and read correctly
    if (dataRead.id == dataToWrite.id &&
        dataRead.value == dataToWrite.value &&
        strcmp(dataRead.name, dataToWrite.name) == 0) {
        // Data successfully written and read
    } else {
        // Error
    }

    while (1) {
        // Main loop
    }
}
